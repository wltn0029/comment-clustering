{"version":3,"sources":["components/UrlForm.js","components/VideoInfo.js","components/CommentThread.js","comments/korean_result.txt","comments/english_result.txt","components/Comments.js","App.js","reportWebVitals.js","index.js"],"names":["getVideoPageInfo","videoId","UrlForm","props","handleClick","e","inputRef","current","value","length","videoUrl","match","getVideoId","a","axios","get","data","pageInfo","totalResults","setState","correctInput","checkUrlValid","undefined","React","createRef","state","bind","nextProps","nextState","this","Fragment","className","placeholder","ref","onClick","Component","apiKey","getVideoInfo","getChannelInfo","channelId","VideoInfo","updateVideoInfo","console","log","videoInfo","items","snippet","title","description","thumbnails","videoThumbnail","default","url","channelInfo","channelImg","videoTitle","CommentThread","expand","category","comments","commentThread","slice","isShowMore","categoryName","map","comment","authorDisplayName","authorProfileImageUrl","textOriginal","id","Comment","getCommentThreads","engVideoId","Comments","analyzeComments","file","english_result","korean_result","readTextFile","convertedComments","topLevelComment","postBody","rawData","requestMetadata","method","headers","body","JSON","stringify","httpsAgent","https","Agent","rejectUnauthorized","fetch","then","res","json","renderComments","catch","error","response","text","parse","pos","neg","neu","isSelected","selectedCategory","expandCommentThreads","fakeVideoIds","requestUrl","App","fakeVideoId","onChangeVideoUrl","_","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1f0077ef.chunk.js","sourcesContent":["import axios from 'axios';\nimport React, { Component } from 'react';\nimport './UrlForm.css';\n\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\nconst getVideoPageInfo = (videoId) => `https://www.googleapis.com/youtube/v3/videos?\\\n                                        part=id&key=${apiKey}&id=${videoId}`\n\n// ref : https://stackoverflow.com/questions/3452546/how-do-i-get-the-youtube-video-id-from-a-url\nconst getVideoId = videoUrl => {\n  let regExp = /^.*(youtu\\.be\\/|v\\/|u\\/\\w\\/|embed\\/|watch\\?v=|\\&v=)([^#\\&\\?]*).*/;\n  let match = videoUrl.match(regExp);\n  if (match && match[2].length === 11) {\n    return match[2];\n  } else {\n    return undefined;\n  }\n}\n\nclass UrlForm extends Component {\n  constructor(props) {\n    super(props);\n    this.inputRef = React.createRef();\n    // correctInput\n    // undefined : no link\n    // true : right link\n    // false : wrong link\n    this.state = {\n      correctInput : undefined\n    }\n    this.handleClick = this.handleClick.bind(this)\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n   if (nextState.correctInput !== this.state.correctInput) {\n        return true\n    }\n    return false;\n  }\n\n  handleClick = (e) => {\n    if (!this.inputRef.current) {\n      return;\n    } \n    \n    if (this.inputRef.current.value.length === 0) {\n      this.setState({\n        correctInput: undefined\n      })\n      return;\n    }\n\n    const videoId = getVideoId(this.inputRef.current.value);\n    if (!videoId ) {\n      this.setState({\n        correctInput: false\n      })\n      return;\n    } \n\n    const checkUrlValid = async(videoId) => {\n      const videoPageInfo = await axios.get(getVideoPageInfo(videoId));\n      if (videoPageInfo.data.pageInfo.totalResults === 0) {\n        this.setState({\n          correctInput: false\n        })\n      } else {\n        this.props.handleClick(videoId);\n        this.setState({\n          correctInput: true\n        })\n      }\n    }\n\n    checkUrlValid(videoId);\n  }\n\n  render() {\n    const checkInputIconClass = this.state.correctInput ? \n                                  'right-input' : \n                                  this.state.correctInput === false ?\n                                  'wrong-input' :\n                                  'no-input'\n    \n    // console.log(\"hello\")\n    // console.log(this.state.videoId)\n    return (\n      <React.Fragment>\n        <div className=\"center\">\n          <div className=\"title-main\">\n            Comment Clustering\n          </div>\n          <div className=\"blank\"></div>\n          <input className=\"input-text\"\n            placeholder=\"write youtube url\"\n            ref={this.inputRef}\n          />\n          <button className=\"arrange-btn\" onClick={this.handleClick}>rearrange</button>\n          {/* <div className={checkInputIconClass}></div> */}\n        </div>\n        {this.state.correctInput === false && (\n          <span className = \"wrong-text\">\n            Please insert correct url\n          </span>\n        )}\n      </React.Fragment>\n      \n    );\n  }\n}\n\nexport default UrlForm;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport './VideoInfo.css';\n\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\nconst getVideoInfo = videoId => `https://www.googleapis.com/youtube/v3/videos?part=snippet&key=${apiKey}\\\n                              &id=${videoId}`\nconst getChannelInfo = channelId => `https://www.googleapis.com/youtube/v3/channels?part=snippet&key=${apiKey}\\\n                              &id=${channelId}`\n\nclass VideoInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            videoTitle : '',\n            description: '',\n            videoThumbnail: '',\n            channelImg : ''\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.videoId !== this.props.videoId) {\n            this.updateVideoInfo(nextProps.videoId);\n            return true;\n        } else if (nextState.videoTitle !== this.state.videoTitle ||\n                    nextState.videoThumbnail !== this.state.videoThumbnail ||\n                    nextState.description !== this.state.default ||\n                    nextState.channelImg !== this.state.channelImg) {\n            return true\n        }\n        return false;\n    }\n\n    updateVideoInfo = async(videoId) => {\n        if (!videoId) {\n            return;\n        }\n        console.log('videoId');\n        const videoInfo = await axios.get(getVideoInfo(videoId));\n        const {channelId, title, description, thumbnails}  = {...videoInfo.data.items[0].snippet};\n        const videoThumbnail = thumbnails.default.url;\n\n        const channelInfo = await axios.get(getChannelInfo(channelId));\n        const channelImg = channelInfo.data.items[0].snippet.thumbnails.default.url;\n        \n        this.setState({videoTitle: title, videoThumbnail, description, channelImg});\n    }\n\n    render() {\n        const {videoTitle, videoThumbnail, description, channelImg} = this.state;\n        // console.log('render')\n        return (\n            <div className=\"video-info\">\n                <div className=\"video-title-info\">\n                    {/* {videoThumbnail && (<img className=\"video-thumbnail\" src={videoThumbnail}/>)} */}\n                    {videoTitle && (<text className=\"video-title\">{videoTitle}</text>)}\n                </div>\n                <div>\n                    {/* {channelImg && (<img className=\"video-img\" src={channelImg}/>)} */}\n                    {description && (<div className=\"video-description\">{description}</div>)}\n                </div>\n            </div>\n           \n        );\n    }\n}\n\nexport default VideoInfo;","import React, { Component } from 'react';\n// import classNames from 'classnames';\nimport './CommentThread.css';\n\nclass CommentThread extends Component { \n    constructor(props) {\n        super(props);\n        this.handleClick = this.handleClick.bind(this);\n    }\n\n    handleClick = (e) => {\n        const {expand, category} = this.props;\n        if (expand) {\n            this.props.handleClick('');\n        } else {\n            this.props.handleClick(category);\n        }\n    }\n\n    render() {\n        // expand (true, false, undefined)\n        // true: expand\n        // false : show top comment\n        // undefined : nothing to show\n        const {expand, comments} = this.props;\n        const commentThread = expand? comments : comments.slice(0,1);\n        const isShowMore = expand? 'Close' : 'Show More';\n        const categoryName = this.props.category === \"pos\" ? \"POSITIVE\" : this.props.category === \"neu\" ? \"NEUTRALITY\" : \"NEGATIVE\"\n\n        return (\n            expand !== undefined && (\n                <div>\n                    <div className=\"category\">\n                        <span className=\"category-name\">{categoryName}</span>\n                        <button className='thread-btn' onClick={this.handleClick}>{isShowMore}</button>\n                    </div>\n                    <div>\n                    {commentThread.map(comment => (\n                        <Comment \n                            key={comment.id}\n                            authorDisplayName={comment.authorDisplayName}\n                            authorProfileImageUrl={comment.authorProfileImageUrl}\n                            textOriginal={comment.textOriginal}/>\n                    ))}\n                    </div>\n                </div>\n            )\n        );\n    }\n}\n\nclass Comment extends Component {\n    render() {\n        const {authorDisplayName, authorProfileImageUrl, textOriginal} = this.props;\n        return(\n            <React.Fragment>\n                <div className=\"profile\">\n                    {/* <img className='profile-image' src={authorProfileImageUrl}/> */}\n                    <span className='user-name'>{authorDisplayName}</span>\n                    <span> : </span>\n                    <span className='comment-text'>{textOriginal}</span>\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default CommentThread;","export default __webpack_public_path__ + \"static/media/korean_result.25dc3181.txt\";","export default __webpack_public_path__ + \"static/media/english_result.3ca58fdc.txt\";","import React, { Component } from 'react';\nimport axios from 'axios';\nimport CommentThread from './CommentThread';\nimport https from 'https';\nimport korean_result from '../comments/korean_result.txt';\nimport english_result from '../comments/english_result.txt';\n\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\nconst getCommentThreads = videoId => `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&key=${apiKey}\\\n                                        &videoId=${videoId}&maxResults=100`;\nconst requestUrl = 'https://143.248.144.129:8080/main';\nconst engVideoId ='MXuog-hJfes';\nconst korVideoId ='Tm9Wzzr-DUI';\n\n\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            neg : [],\n            pos : [],\n            neu : [],\n            selectedCategory: ''\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.videoId !== this.props.videoId) {\n            this.analyzeComments(nextProps.videoId);\n            return true;\n        } else if (nextState.neg !== this.state.neg ||\n                    nextState.pos !== this.state.pos ||\n                    nextState.neu !== this.state.neu || \n                    nextState.selectedCategory !== this.state.selectedCategory) {\n            return true\n        }\n        return false;\n    }\n\n    analyzeComments = async(videoId) => {\n        if (!videoId) {\n            return;\n        }\n\n        // case : fake videoId\n        if (videoId === engVideoId || videoId === korVideoId) {\n            let file = videoId === engVideoId ? english_result : korean_result;\n            this.readTextFile(file);\n            return;\n        }\n\n        const comments = await axios.get(getCommentThreads(videoId));\n        const convertedComments = comments.data.items.map(comment => {\n            const id = comment.snippet.topLevelComment.id\n            const {authorDisplayName, authorProfileImageUrl, textOriginal} = \n                {...comment.snippet.topLevelComment.snippet}\n            return {id, authorDisplayName, authorProfileImageUrl, textOriginal}\n        })\n        \n        // Request : send comments to server to get sentimental results\n        // method : POST\n        // body : { rawData : convertedComments }\n        // response : {pos : commentsList, neg : commentList, neu : commentList }\n        const postBody = {\n            rawData : convertedComments \n        };\n\n\n        const requestMetadata = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n                \n            },\n            body: JSON.stringify(postBody),\n            httpsAgent: new https.Agent({ rejectUnauthorized: false })\n        };\n        \n        fetch(requestUrl, requestMetadata)\n            .then(res => res.json())\n            .then(data => {\n                this.renderComments(data);\n            })\n            .catch(error => {\n                console.log(`fetch server failed with error ${error}`);\n            })\n    }\n\n    readTextFile=(file) => {\n        fetch(file)\n        .then(response => response.text())\n        .then(text => {\n            this.renderComments(JSON.parse(text));\n        })\n    }\n\n    renderComments = (comments) => {\n        this.setState({\n            pos: comments.pos,\n            neg: comments.neg,\n            neu: comments.neu\n        })\n    }\n\n    // category \n    // pos : expand positive comments\n    // neu : expand neutral comments\n    // neg : expand negative comments\n    // '' : nothing to expand \n    isSelected = (category) => {\n        if (this.state.selectedCategory === '') {\n            return false;\n        } else if (this.state.selectedCategory === category) {\n            return true;\n        } else {\n            return undefined;\n        }\n    }\n\n    expandCommentThreads = (category) => {\n        console.log('expandcommentthread', category)\n        this.setState({selectedCategory: category})\n    }\n\n    render() {\n        // console.log(decode_utf8(\"\\ucc44\\uc740\"))\n\n        const {pos, neg, neu} = this.state;\n        return (\n            <div className=\"comments\">\n                {(pos.length !==0 || neg.length !== 0 || neu.length !== 0) && (\n                    <div>\n                        <CommentThread category=\"pos\" comments={this.state.pos}\n                            expand={this.isSelected(\"pos\")} handleClick={this.expandCommentThreads}/>\n                        <CommentThread category=\"neu\" comments={this.state.neu} \n                            expand={this.isSelected(\"neu\")} handleClick={this.expandCommentThreads}/>\n                        <CommentThread category=\"neg\" comments={this.state.neg} \n                            expand={this.isSelected(\"neg\")} handleClick={this.expandCommentThreads}/>\n                    </div>\n                ) }\n            </div>\n        );\n    }\n}\n\nexport default Comments;","import './App.css';\nimport React from 'react';\nimport UrlForm from './components/UrlForm';\nimport VideoInfo from './components/VideoInfo';\nimport Comments from './components/Comments';\nimport axios from 'axios';\n\nconst fakeVideoIds = ['MXuog-hJfes','Tm9Wzzr-DUI'];\nconst requestUrl = 'https://143.248.144.129:8080/main';\n\nclass App extends React.Component {\n  state = {\n    videoId: '',\n    fakeVideoId: 1,\n  }\n\n  onChangeVideoUrl = async(videoId) => {\n    const serverConnection = axios.get(requestUrl);\n    serverConnection\n    .then( _ => this.setState({videoId}))\n    .catch( _ => {\n      const fakeVideoId = videoId === fakeVideoIds[0]\n                          ? 0 \n                          : videoId === fakeVideoIds[1] \n                          ? 1 \n                          : this.state.fakeVideoId;\n      this.setState({\n        videoId: fakeVideoIds[fakeVideoId],\n        fakeVideoId: !fakeVideoId? 1: 0\n      });\n    })\n    \n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n          <UrlForm handleClick={this.onChangeVideoUrl}/>\n          <VideoInfo videoId={this.state.videoId}/>\n          <Comments videoId={this.state.videoId}/>\n      </div>\n    );\n  }\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}