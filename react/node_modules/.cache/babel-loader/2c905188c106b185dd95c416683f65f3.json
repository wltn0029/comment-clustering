{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jisu/comment-clustering/react/src/components/VideoInfo.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\n\nconst getVideoInfo = videoId => `https://www.googleapis.com/youtube/v3/videos?part=snippet&key=${apiKey}\\\n                              &id=${videoId}`;\n\nconst getChannelInfo = channelId => `https://www.googleapis.com/youtube/v3/channels?part=snippet&key=${apiKey}\\\n                              &id=${channelId}`;\n\nclass VideoInfo extends Component {\n  constructor(props) {\n    super(props);\n\n    this.updateVideoInfo = async videoId => {\n      if (!videoId) {\n        return;\n      }\n\n      const videoInfo = await axios.get(getVideoInfo(videoId));\n      const videoInfoData = videoInfo.data.items[0].snippet;\n      const channelId = videoInfoData.channelId;\n      const videoTitle = videoInfoData.title;\n      const description = videoInfoData.description;\n      const videoThumbnail = videoInfoData.thumbnails.default.url;\n      const channelInfo = await axios.get(getChannelInfo(channelId));\n      const channelImg = channelInfo.data.items[0].snippet.thumbnails.default.url;\n      this.setState({\n        videoTitle,\n        videoThumbnail,\n        description,\n        channelImg\n      });\n    };\n\n    this.state = {\n      videoTitle: '',\n      description: '',\n      videoThumbnail: '',\n      channelImg: ''\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.videoId !== this.props.videoId) {\n      this.updateVideoInfo(nextProps.videoId);\n      return true;\n    } else if (nextState.videoTitle !== this.state.videoTitle || nextState.videoThumbnail !== this.state.videoThumbnail || nextState.description !== this.state.default || nextState.channelImg !== this.state.channelImg) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      videoTitle,\n      videoThumbnail,\n      description,\n      channelImg\n    } = this.state;\n    console.log('render');\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"video-info\",\n      children: [videoThumbnail && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: videoThumbnail\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 37\n      }, this), videoTitle && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: videoTitle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 33\n      }, this), description && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 58,\n        columnNumber: 34\n      }, this), channelImg && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: channelImg\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 59,\n        columnNumber: 33\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default VideoInfo;","map":{"version":3,"sources":["/Users/jisu/comment-clustering/react/src/components/VideoInfo.js"],"names":["React","Component","axios","apiKey","getVideoInfo","videoId","getChannelInfo","channelId","VideoInfo","constructor","props","updateVideoInfo","videoInfo","get","videoInfoData","data","items","snippet","videoTitle","title","description","videoThumbnail","thumbnails","default","url","channelInfo","channelImg","setState","state","shouldComponentUpdate","nextProps","nextState","render","console","log"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\n\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\nconst getVideoInfo = videoId => `https://www.googleapis.com/youtube/v3/videos?part=snippet&key=${apiKey}\\\n                              &id=${videoId}`\nconst getChannelInfo = channelId => `https://www.googleapis.com/youtube/v3/channels?part=snippet&key=${apiKey}\\\n                              &id=${channelId}`\n\nclass VideoInfo extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            videoTitle : '',\n            description: '',\n            videoThumbnail: '',\n            channelImg : ''\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.videoId !== this.props.videoId) {\n            this.updateVideoInfo(nextProps.videoId);\n            return true;\n        } else if (nextState.videoTitle !== this.state.videoTitle ||\n                    nextState.videoThumbnail !== this.state.videoThumbnail ||\n                    nextState.description !== this.state.default ||\n                    nextState.channelImg !== this.state.channelImg) {\n            return true\n        }\n        return false;\n    }\n\n    updateVideoInfo = async(videoId) => {\n        if (!videoId) {\n            return;\n        }\n        const videoInfo = await axios.get(getVideoInfo(videoId));\n        const videoInfoData = videoInfo.data.items[0].snippet;\n        const channelId = videoInfoData.channelId;\n        const videoTitle = videoInfoData.title;\n        const description = videoInfoData.description;\n        const videoThumbnail = videoInfoData.thumbnails.default.url;\n\n        const channelInfo = await axios.get(getChannelInfo(channelId));\n        const channelImg = channelInfo.data.items[0].snippet.thumbnails.default.url;\n        \n        this.setState({videoTitle, videoThumbnail, description, channelImg});\n    }\n\n    render() {\n        const {videoTitle, videoThumbnail, description, channelImg} = this.state;\n        console.log('render')\n        return (\n            <div  className=\"video-info\">\n                {videoThumbnail && (<img src={videoThumbnail}/>)}\n                {videoTitle && (<div>{videoTitle}</div>)}\n                {description && (<div>{description}</div>)}\n                {channelImg && (<img src={channelImg}/>)}\n            </div>\n           \n        );\n    }\n}\n\nexport default VideoInfo;"]},"metadata":{},"sourceType":"module"}