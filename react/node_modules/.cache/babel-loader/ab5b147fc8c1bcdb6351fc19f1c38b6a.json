{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jisu/comment-clustering/react/src/components/Comments.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport CommentThread from './CommentThread';\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\n\nconst getCommentThreads = videoId => `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&key=${apiKey}\\\n                                        &videoId=${videoId}&maxResults=100`;\n\nclass Comments extends Component {\n  constructor(props) {\n    super(props);\n\n    this.analyzeComments = async videoId => {\n      if (!videoId) {\n        return;\n      }\n\n      const comments = await axios.get(getCommentThreads(videoId));\n      const convertedComments = comments.data.items.map(comment => {\n        const id = comment.snippet.topLevelComment.id;\n        const {\n          authorDisplayName,\n          authorProfileImageUrl,\n          textOriginal\n        } = { ...comment.snippet.topLevelComment.snippet\n        };\n        return {\n          id,\n          authorDisplayName,\n          authorProfileImageUrl,\n          textOriginal\n        };\n      });\n      console.log(convertedComments); // todo : send comments to server to get sentimental results\n      // for now treat every comments as positive\n\n      this.setState({ ...this.state,\n        pos: convertedComments\n      });\n    };\n\n    this.isSelected = category => {\n      if (this.state.selectedCategory === '') {\n        return false;\n      } else if (this.state.selectedCategory === category) {\n        return true;\n      } else {\n        return undefined;\n      }\n    };\n\n    this.expandCommentThreads = category => {\n      this.setState({ ...this.state,\n        selectedCategory: category\n      });\n    };\n\n    this.state = {\n      neg: [],\n      pos: [],\n      neu: [],\n      selectedCategory: ''\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.videoId !== this.props.videoId) {\n      this.analyzeComments(nextProps.videoId);\n      return true;\n    } else if (nextState.neg !== this.state.neg || nextState.pos !== this.state.pos || nextState.neu !== this.state.neu) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      pos,\n      neg,\n      neu\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: (pos.length !== 0 || neg.length !== 0 || neu.length !== 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CommentThread, {\n          category: \"pos\",\n          comments: this.state.pos,\n          expand: this.isSelected(\"pos\"),\n          handleClick: this.expandCommentThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 76,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CommentThread, {\n          category: \"neu\",\n          comments: this.state.neu,\n          expand: this.isSelected(\"neu\"),\n          handleClick: this.expandCommentThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 78,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CommentThread, {\n          category: \"neg\",\n          comments: this.state.neg,\n          expand: this.isSelected(\"neg\"),\n          handleClick: this.expandCommentThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Comments;","map":{"version":3,"sources":["/Users/jisu/comment-clustering/react/src/components/Comments.js"],"names":["React","Component","axios","CommentThread","apiKey","getCommentThreads","videoId","Comments","constructor","props","analyzeComments","comments","get","convertedComments","data","items","map","comment","id","snippet","topLevelComment","authorDisplayName","authorProfileImageUrl","textOriginal","console","log","setState","state","pos","isSelected","category","selectedCategory","undefined","expandCommentThreads","neg","neu","shouldComponentUpdate","nextProps","nextState","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport CommentThread from './CommentThread';\n\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\nconst getCommentThreads = videoId => `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&key=${apiKey}\\\n                                        &videoId=${videoId}&maxResults=100`\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            neg : [],\n            pos : [],\n            neu : [],\n            selectedCategory: ''\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.videoId !== this.props.videoId) {\n            this.analyzeComments(nextProps.videoId);\n            return true;\n        } else if (nextState.neg !== this.state.neg ||\n                    nextState.pos !== this.state.pos ||\n                    nextState.neu !== this.state.neu) {\n            return true\n        }\n        return false;\n    }\n\n    analyzeComments = async(videoId) => {\n        if (!videoId) {\n            return;\n        }\n        const comments = await axios.get(getCommentThreads(videoId));\n        const convertedComments = comments.data.items.map(comment => {\n            const id = comment.snippet.topLevelComment.id\n            const {authorDisplayName, authorProfileImageUrl, textOriginal} = \n                {...comment.snippet.topLevelComment.snippet}\n            return {id, authorDisplayName, authorProfileImageUrl, textOriginal}\n        })\n        console.log(convertedComments)\n        // todo : send comments to server to get sentimental results\n        // for now treat every comments as positive\n        this.setState({\n            ...this.state,\n            pos: convertedComments\n        })\n    }\n\n    // category \n    // pos : expand positive comments\n    // neu : expand neutral comments\n    // neg : expand negative comments\n    // '' : nothing to expand \n    isSelected = (category) => {\n        if (this.state.selectedCategory === '') {\n            return false;\n        } else if (this.state.selectedCategory === category) {\n            return true;\n        } else {\n            return undefined;\n        }\n    }\n\n    expandCommentThreads = (category) => {\n        this.setState({...this.state,selectedCategory: category})\n    }\n\n    render() {\n        const {pos, neg, neu} = this.state;\n        return (\n            <div  className=\"comments\">\n                {(pos.length !==0 || neg.length !== 0 || neu.length !== 0) && (\n                    <div>\n                        <CommentThread category=\"pos\" comments={this.state.pos}\n                            expand={this.isSelected(\"pos\")} handleClick={this.expandCommentThreads}/>\n                        <CommentThread category=\"neu\" comments={this.state.neu} \n                            expand={this.isSelected(\"neu\")} handleClick={this.expandCommentThreads}/>\n                        <CommentThread category=\"neg\" comments={this.state.neg} \n                            expand={this.isSelected(\"neg\")} handleClick={this.expandCommentThreads}/>\n                    </div>\n                ) }\n            </div>\n        );\n    }\n}\n\nexport default Comments;"]},"metadata":{},"sourceType":"module"}