{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jisu/comment-clustering/react/src/components/Comments.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport CommentThread from './CommentThread';\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\n\nconst getCommentThreads = videoId => `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&key=${apiKey}\\\n                                        &videoId=${videoId}&maxResults=100`;\n\nclass Comments extends Component {\n  constructor(props) {\n    super(props);\n\n    this.analyzeComments = async videoId => {\n      if (!videoId) {\n        return;\n      }\n\n      const comments = await axios.get(getCommentThreads(videoId));\n      const convertedComments = comments.data.items.map(comment => {\n        const id = comment.snippet.topLevelComment.id;\n        const {\n          authorDisplayName,\n          authorProfileImageUrl,\n          textOriginal\n        } = { ...comment.snippet.topLevelComment.snippet\n        };\n        return {\n          id,\n          authorDisplayName,\n          authorProfileImageUrl,\n          textOriginal\n        };\n      });\n      console.log(convertedComments); // todo : send comments to server to get sentimental results\n      // for now treat every comments as positive\n\n      this.setState({\n        pos: convertedComments\n      });\n    };\n\n    this.state = {\n      neg: [],\n      pos: [],\n      neu: []\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.videoId !== this.props.videoId) {\n      this.analyzeComments(nextProps.videoId);\n      return true;\n    } else if (nextState.neg !== this.state.neg || nextState.pos !== this.state.pos || nextState.neu !== this.state.neu) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      pos,\n      neg,\n      neu\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: (pos.length !== 0 || neg.length !== 0 || neu.length !== 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CommentThread, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CommentThread, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CommentThread, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Comments;","map":{"version":3,"sources":["/Users/jisu/comment-clustering/react/src/components/Comments.js"],"names":["React","Component","axios","CommentThread","apiKey","getCommentThreads","videoId","Comments","constructor","props","analyzeComments","comments","get","convertedComments","data","items","map","comment","id","snippet","topLevelComment","authorDisplayName","authorProfileImageUrl","textOriginal","console","log","setState","pos","state","neg","neu","shouldComponentUpdate","nextProps","nextState","render","length"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,aAAP,MAA0B,iBAA1B;AAEA,MAAMC,MAAM,GAAG,yCAAf;;AACA,MAAMC,iBAAiB,GAAGC,OAAO,IAAK,yEAAwEF,MAAO;AACrH,mDAAmDE,OAAQ,iBAD3D;;AAEA,MAAMC,QAAN,SAAuBN,SAAvB,CAAiC;AAC7BO,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACf,UAAMA,KAAN;;AADe,SAqBnBC,eArBmB,GAqBD,MAAMJ,OAAN,IAAkB;AAChC,UAAI,CAACA,OAAL,EAAc;AACV;AACH;;AACD,YAAMK,QAAQ,GAAG,MAAMT,KAAK,CAACU,GAAN,CAAUP,iBAAiB,CAACC,OAAD,CAA3B,CAAvB;AACA,YAAMO,iBAAiB,GAAGF,QAAQ,CAACG,IAAT,CAAcC,KAAd,CAAoBC,GAApB,CAAwBC,OAAO,IAAI;AACzD,cAAMC,EAAE,GAAGD,OAAO,CAACE,OAAR,CAAgBC,eAAhB,CAAgCF,EAA3C;AACA,cAAM;AAACG,UAAAA,iBAAD;AAAoBC,UAAAA,qBAApB;AAA2CC,UAAAA;AAA3C,YACF,EAAC,GAAGN,OAAO,CAACE,OAAR,CAAgBC,eAAhB,CAAgCD;AAApC,SADJ;AAEA,eAAO;AAACD,UAAAA,EAAD;AAAKG,UAAAA,iBAAL;AAAwBC,UAAAA,qBAAxB;AAA+CC,UAAAA;AAA/C,SAAP;AACH,OALyB,CAA1B;AAMAC,MAAAA,OAAO,CAACC,GAAR,CAAYZ,iBAAZ,EAXgC,CAYhC;AACA;;AACA,WAAKa,QAAL,CAAc;AACVC,QAAAA,GAAG,EAAEd;AADK,OAAd;AAGH,KAtCkB;;AAEf,SAAKe,KAAL,GAAa;AACTC,MAAAA,GAAG,EAAG,EADG;AAETF,MAAAA,GAAG,EAAG,EAFG;AAGTG,MAAAA,GAAG,EAAG;AAHG,KAAb;AAKH;;AAEDC,EAAAA,qBAAqB,CAACC,SAAD,EAAYC,SAAZ,EAAuB;AACxC,QAAID,SAAS,CAAC1B,OAAV,KAAsB,KAAKG,KAAL,CAAWH,OAArC,EAA8C;AAC1C,WAAKI,eAAL,CAAqBsB,SAAS,CAAC1B,OAA/B;AACA,aAAO,IAAP;AACH,KAHD,MAGO,IAAI2B,SAAS,CAACJ,GAAV,KAAkB,KAAKD,KAAL,CAAWC,GAA7B,IACCI,SAAS,CAACN,GAAV,KAAkB,KAAKC,KAAL,CAAWD,GAD9B,IAECM,SAAS,CAACH,GAAV,KAAkB,KAAKF,KAAL,CAAWE,GAFlC,EAEuC;AAC1C,aAAO,IAAP;AACH;;AACD,WAAO,KAAP;AACH;;AAqBDI,EAAAA,MAAM,GAAG;AACL,UAAM;AAACP,MAAAA,GAAD;AAAME,MAAAA,GAAN;AAAWC,MAAAA;AAAX,QAAkB,KAAKF,KAA7B;AACA,wBACI;AAAM,MAAA,SAAS,EAAC,UAAhB;AAAA,gBACK,CAACD,GAAG,CAACQ,MAAJ,KAAc,CAAd,IAAmBN,GAAG,CAACM,MAAJ,KAAe,CAAlC,IAAuCL,GAAG,CAACK,MAAJ,KAAe,CAAvD,kBACG;AAAA,gCACI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI,QAAC,aAAD;AAAA;AAAA;AAAA;AAAA,gBAHJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAFR;AAAA;AAAA;AAAA;AAAA,YADJ;AAWH;;AAtD4B;;AAyDjC,eAAe5B,QAAf","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport CommentThread from './CommentThread';\n\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\nconst getCommentThreads = videoId => `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&key=${apiKey}\\\n                                        &videoId=${videoId}&maxResults=100`\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            neg : [],\n            pos : [],\n            neu : []\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.videoId !== this.props.videoId) {\n            this.analyzeComments(nextProps.videoId);\n            return true;\n        } else if (nextState.neg !== this.state.neg ||\n                    nextState.pos !== this.state.pos ||\n                    nextState.neu !== this.state.neu) {\n            return true\n        }\n        return false;\n    }\n\n    analyzeComments = async(videoId) => {\n        if (!videoId) {\n            return;\n        }\n        const comments = await axios.get(getCommentThreads(videoId));\n        const convertedComments = comments.data.items.map(comment => {\n            const id = comment.snippet.topLevelComment.id\n            const {authorDisplayName, authorProfileImageUrl, textOriginal} = \n                {...comment.snippet.topLevelComment.snippet}\n            return {id, authorDisplayName, authorProfileImageUrl, textOriginal}\n        })\n        console.log(convertedComments)\n        // todo : send comments to server to get sentimental results\n        // for now treat every comments as positive\n        this.setState({\n            pos: convertedComments\n        })\n    }\n\n    render() {\n        const {pos, neg, neu} = this.state;\n        return (\n            <div  className=\"comments\">\n                {(pos.length !==0 || neg.length !== 0 || neu.length !== 0) && (\n                    <div>\n                        <CommentThread/>\n                        <CommentThread/>\n                        <CommentThread/>\n                    </div>\n                ) }\n            </div>\n        );\n    }\n}\n\nexport default Comments;"]},"metadata":{},"sourceType":"module"}