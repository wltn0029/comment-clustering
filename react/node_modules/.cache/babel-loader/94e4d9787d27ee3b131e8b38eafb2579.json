{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/Users/jisu/comment-clustering/react/src/components/Comments.js\";\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport CommentThread from './CommentThread';\nimport { Buffer } from 'buffer';\nimport CommentThreadCss from './CommentThread.css';\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\n\nconst getCommentThreads = videoId => `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&key=${apiKey}\\\n                                        &videoId=${videoId}&maxResults=100`;\n\nconst requestUrl = 'http://143.248.144.129:8080/main';\n\nclass Comments extends Component {\n  constructor(props) {\n    super(props);\n\n    this.analyzeComments = async videoId => {\n      if (!videoId) {\n        return;\n      }\n\n      const comments = await axios.get(getCommentThreads(videoId));\n      const convertedComments = comments.data.items.map(comment => {\n        const id = comment.snippet.topLevelComment.id;\n        const {\n          authorDisplayName,\n          authorProfileImageUrl,\n          textOriginal\n        } = { ...comment.snippet.topLevelComment.snippet\n        };\n        const textBuffer = Buffer.from(textOriginal, 'utf8');\n        return {\n          id,\n          authorDisplayName,\n          authorProfileImageUrl,\n          textBuffer\n        };\n      }); // Request : send comments to server to get sentimental results\n      // method : POST\n      // body : { rawData : convertedComments }\n      // response : {pos : commentsList, neg : commentList, neu : commentList }\n\n      const postBody = {\n        rawData: convertedComments\n      };\n      const requestMetadata = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json; charset=utf-8'\n        },\n        body: postBody\n      };\n      console.log(requestMetadata); // fetch(requestUrl, requestMetadata)\n      //     .then(res => {\n      //         //todo : fetch server's response and render it  \n      //     })\n\n      this.setState({\n        pos: convertedComments\n      });\n    };\n\n    this.isSelected = category => {\n      if (this.state.selectedCategory === '') {\n        return false;\n      } else if (this.state.selectedCategory === category) {\n        return true;\n      } else {\n        return undefined;\n      }\n    };\n\n    this.expandCommentThreads = category => {\n      console.log('expandcommentthread', category);\n      this.setState({\n        selectedCategory: category\n      });\n    };\n\n    this.state = {\n      neg: [],\n      pos: [],\n      neu: [],\n      selectedCategory: ''\n    };\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    if (nextProps.videoId !== this.props.videoId) {\n      this.analyzeComments(nextProps.videoId);\n      return true;\n    } else if (nextState.neg !== this.state.neg || nextState.pos !== this.state.pos || nextState.neu !== this.state.neu || nextState.selectedCategory !== this.state.selectedCategory) {\n      return true;\n    }\n\n    return false;\n  }\n\n  render() {\n    const {\n      pos,\n      neg,\n      neu\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"comments\",\n      children: (pos.length !== 0 || neg.length !== 0 || neu.length !== 0) && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(CommentThread, {\n          category: \"pos\",\n          comments: this.state.pos,\n          expand: this.isSelected(\"pos\"),\n          handleClick: this.expandCommentThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CommentThread, {\n          category: \"neu\",\n          comments: this.state.neu,\n          expand: this.isSelected(\"neu\"),\n          handleClick: this.expandCommentThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(CommentThread, {\n          category: \"neg\",\n          comments: this.state.neg,\n          expand: this.isSelected(\"neg\"),\n          handleClick: this.expandCommentThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 105,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 21\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default Comments;","map":{"version":3,"sources":["/Users/jisu/comment-clustering/react/src/components/Comments.js"],"names":["React","Component","axios","CommentThread","Buffer","CommentThreadCss","apiKey","getCommentThreads","videoId","requestUrl","Comments","constructor","props","analyzeComments","comments","get","convertedComments","data","items","map","comment","id","snippet","topLevelComment","authorDisplayName","authorProfileImageUrl","textOriginal","textBuffer","from","postBody","rawData","requestMetadata","method","headers","body","console","log","setState","pos","isSelected","category","state","selectedCategory","undefined","expandCommentThreads","neg","neu","shouldComponentUpdate","nextProps","nextState","render","length"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport axios from 'axios';\nimport CommentThread from './CommentThread';\nimport { Buffer } from 'buffer'\nimport CommentThreadCss from './CommentThread.css';\n\nconst apiKey = 'AIzaSyBhrKlcf07TRvzF5RPeKOxYSBC06TP-JUc';\nconst getCommentThreads = videoId => `https://www.googleapis.com/youtube/v3/commentThreads?part=snippet&key=${apiKey}\\\n                                        &videoId=${videoId}&maxResults=100`;\nconst requestUrl = 'http://143.248.144.129:8080/main';\nclass Comments extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            neg : [],\n            pos : [],\n            neu : [],\n            selectedCategory: ''\n        }\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if (nextProps.videoId !== this.props.videoId) {\n            this.analyzeComments(nextProps.videoId);\n            return true;\n        } else if (nextState.neg !== this.state.neg ||\n                    nextState.pos !== this.state.pos ||\n                    nextState.neu !== this.state.neu || \n                    nextState.selectedCategory !== this.state.selectedCategory) {\n            return true\n        }\n        return false;\n    }\n\n    analyzeComments = async(videoId) => {\n        if (!videoId) {\n            return;\n        }\n        const comments = await axios.get(getCommentThreads(videoId));\n        const convertedComments = comments.data.items.map(comment => {\n            const id = comment.snippet.topLevelComment.id\n            const {authorDisplayName, authorProfileImageUrl, textOriginal} = \n                {...comment.snippet.topLevelComment.snippet}\n            const textBuffer = Buffer.from(textOriginal, 'utf8');\n            return {id, authorDisplayName, authorProfileImageUrl, textBuffer}\n        })\n        \n        // Request : send comments to server to get sentimental results\n        // method : POST\n        // body : { rawData : convertedComments }\n        // response : {pos : commentsList, neg : commentList, neu : commentList }\n        const postBody = {\n            rawData : convertedComments \n        };\n        const requestMetadata = {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json; charset=utf-8'\n                \n            },\n            body: postBody\n        };\n        \n        console.log(requestMetadata)\n        // fetch(requestUrl, requestMetadata)\n        //     .then(res => {\n        //         //todo : fetch server's response and render it  \n        //     })\n\n        this.setState({\n            pos: convertedComments\n        })\n    }\n\n    // category \n    // pos : expand positive comments\n    // neu : expand neutral comments\n    // neg : expand negative comments\n    // '' : nothing to expand \n    isSelected = (category) => {\n        if (this.state.selectedCategory === '') {\n            return false;\n        } else if (this.state.selectedCategory === category) {\n            return true;\n        } else {\n            return undefined;\n        }\n    }\n\n    expandCommentThreads = (category) => {\n        console.log('expandcommentthread', category)\n        this.setState({selectedCategory: category})\n    }\n\n    render() {\n        const {pos, neg, neu} = this.state;\n        return (\n            <div className=\"comments\">\n                {(pos.length !==0 || neg.length !== 0 || neu.length !== 0) && (\n                    <div>\n                        <CommentThread category=\"pos\" comments={this.state.pos}\n                            expand={this.isSelected(\"pos\")} handleClick={this.expandCommentThreads}/>\n                        <CommentThread category=\"neu\" comments={this.state.neu} \n                            expand={this.isSelected(\"neu\")} handleClick={this.expandCommentThreads}/>\n                        <CommentThread category=\"neg\" comments={this.state.neg} \n                            expand={this.isSelected(\"neg\")} handleClick={this.expandCommentThreads}/>\n                    </div>\n                ) }\n            </div>\n        );\n    }\n}\n\nexport default Comments;"]},"metadata":{},"sourceType":"module"}